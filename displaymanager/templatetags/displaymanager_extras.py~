#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4

import sys,string

from django.template import Library
from django.utils.safestring import *

from rapidsms.webui.utils import render_to_response, paginated

from apps.displaymanager.models import *
from apps.displaymanager.utils import *
register = Library()


@register.filter
def linkify(value,crumbs,link=None):
    crumbs = crumbs.replace("->","/")
    link = "<a href='/%s%%(%s)s/%s'>%%(%s)s</a>" % (crumbs,value.func , value.link,value.func)
    strparams = {value.func:value.title}
    if "?" in value.title or "&" in value.title :strparams["title"] = "" #bogus error checking for scripts - dont need it
    
    if value.title == "":
        try:
            link_data_list = dataEval(value,value.func) #,stringHash(value.params))
            return  mark_safe(' '.join([link % l for l in link_data_list]))
            #div-ify formatting here or link to display manager display
            #return mark_safe(' '.join(lambda(x: link % x: ,link_data_list)))
        except Exception,e:
            return e  
    else:
        return mark_safe(link % strparams)

linkify.needs_autoescape = False

@register.filter
def keys(value):
    try: 
        return value.keys()
    except:
        return []

@register.filter
def tableify(value):
    return [v.name for v in value.object_list]

@register.filter
def gettype(value,key):
   try:
       return type(value[key])
   except Exception, e:
        return "err" 

@register.filter
def get(value,key):
   try:
       return value[key]
   except Exception, e:
        return e 

@register.filter
def get_object_list(value,key):
   try:
       return value[key].object_list
   except:
        None



    
