#!/usr/bin/env python
# vim: ai ts=4 sts=4 et sw=4

from django.db.models import Avg,Max,Min,Count
import re,sys,os
from datetime import *
from rapidsms.webui.utils import render_to_response, paginated
from apps.locations.models import *
from apps.reporters.models import *
from apps.healthtables.models import *
from apps.childhealth.models import *
from models import *
#auto gen this

def evalFunc(obj, attr):
    try:
        result = getattr(obj,attr.func)
        if (callable(result)):
            return result()
        else:
            return result
    except Exception,e:
       try:
            #return getattr(getattr(obj, attr.func.split(".")[0]),attr.func.split(".")[1])
            for i in attr.func.split("."): obj = getattr(obj,i) 
            if callable : return obj()
            return obj
       except Exception, e2:
            return obj
    

def stringHash(value):
    pattern = "\%\((.*?)\)s.*"
    vals= re.findall(pattern,value)
    return dict(zip(vals,[]*len(vals)))
    return none

def dataEval(value,*args,**kwargs):
    try:
        if value.params == "" or value.params == "0": #remove 0 temp f#$k up
             cmd = "%s.objects.all()" % (value.klass)
        else:
             cmd = "%s.objects.filter(%s)" % (value.klass,value.params) % kwargs

        if value.filterorder: cmd = "%s.order_by(\"%s\")" % (cmd,value.filterorder)
        data = eval(cmd) 
        if args: return [dict(map(lambda a: (a,evalFunc(d,a)),args)) for d in data]
        return data
    except Exception,e:
        return "%s" % e

def dataPaginate(req,value,*args,**kwargs):
    try:
            if value.params == "" or value.params == "0": #remove 0 temp f#$k up
                cmd = "%s.objects.all()" % (value.klass)
            else:
                  cmd = "%s.objects.filter(%s)" % (value.klass,value.params) % kwargs

            if value.filterorder: cmd = "%s.order_by(\"%s\")" % (cmd,value.filterorder)
            data = eval(cmd)
            return {"paginate":paginated(req,data,prefix="%d" % value.id),"cmd":cmd}

    except Exception,e:
        return "%s" % e


def dataPaginatev2(req,value,kfilter,*args,**kwargs):
    try:
            cmd = "%s.objects" % value.klass
            
            if kfilter is None: 
                cmd = cmd+".all()"
            else:
                cmd = cmd+".filter(**%s)" % kfilter

            if "annotate" in kwargs : cmd = cmd+".annotate(%s)" %    "sum=Count(\"%s\")" % kwargs["annotate"] 
            if value.exclude : cmd = cmd+".exclude(**%s)" % kwargs["exclude"]
            if value.filterorder : cmd = cmd+".order_by(\"%s\")" % value.filterorder 
            data = eval(cmd)
            return {"paginate":paginated(req,data,prefix="%d" % value.id),"cmd":cmd,"data":data}

    except Exception,e:
        return "%s e %s" % (e,cmd)


